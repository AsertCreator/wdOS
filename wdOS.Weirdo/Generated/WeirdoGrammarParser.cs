//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./WeirdoGrammar.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class WeirdoGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AND=1, OR=2, XOR=3, NOT=4, EQ=5, DEQ=6, NEQ=7, DOT=8, COMMA=9, SEMI=10, 
		LPAREN=11, RPAREN=12, LCURLY=13, RCURLY=14, ADD=15, SUB=16, MUL=17, DIV=18, 
		FUNCTION=19, ENTRYPOINT=20, LOCAL=21, RETURN=22, OBJECT=23, PRINT=24, 
		GLOBAL=25, TRUE=26, FALSE=27, NULL=28, UNDEFINED=29, DBQOUTE=30, QUOTE=31, 
		CALL=32, IF=33, INT=34, ID=35, WS=36, COMMENT=37, LINE_COMMENT=38, STRING_LITERAL=39;
	public const int
		RULE_program = 0, RULE_expression = 1, RULE_function_name = 2, RULE_function_call_expression = 3, 
		RULE_string_literal = 4, RULE_global_directive = 5, RULE_entrypoint_directive = 6, 
		RULE_statement = 7, RULE_print_statement = 8, RULE_if_statement = 9, RULE_arg_list = 10, 
		RULE_function = 11;
	public static readonly string[] ruleNames = {
		"program", "expression", "function_name", "function_call_expression", 
		"string_literal", "global_directive", "entrypoint_directive", "statement", 
		"print_statement", "if_statement", "arg_list", "function"
	};

	private static readonly string[] _LiteralNames = {
		null, "'&'", "'|'", "'^'", "'!'", "'='", "'=='", "'!='", "'.'", "','", 
		"';'", "'('", "')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'function'", 
		"'entrypoint'", "'local'", "'return'", "'object'", "'print'", "'global'", 
		"'true'", "'false'", "'null'", "'undefined'", "'\"'", "'''", "'call'", 
		"'if'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AND", "OR", "XOR", "NOT", "EQ", "DEQ", "NEQ", "DOT", "COMMA", "SEMI", 
		"LPAREN", "RPAREN", "LCURLY", "RCURLY", "ADD", "SUB", "MUL", "DIV", "FUNCTION", 
		"ENTRYPOINT", "LOCAL", "RETURN", "OBJECT", "PRINT", "GLOBAL", "TRUE", 
		"FALSE", "NULL", "UNDEFINED", "DBQOUTE", "QUOTE", "CALL", "IF", "INT", 
		"ID", "WS", "COMMENT", "LINE_COMMENT", "STRING_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WeirdoGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WeirdoGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WeirdoGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WeirdoGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(WeirdoGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entrypoint_directiveContext[] entrypoint_directive() {
			return GetRuleContexts<Entrypoint_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entrypoint_directiveContext entrypoint_directive(int i) {
			return GetRuleContext<Entrypoint_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_directiveContext[] global_directive() {
			return GetRuleContexts<Global_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_directiveContext global_directive(int i) {
			return GetRuleContext<Global_directiveContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35127296L) != 0)) {
				{
				State = 27;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FUNCTION:
					{
					State = 24;
					function();
					}
					break;
				case ENTRYPOINT:
					{
					State = 25;
					entrypoint_directive();
					}
					break;
				case GLOBAL:
					{
					State = 26;
					global_directive();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(WeirdoGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_expressionContext function_call_expression() {
			return GetRuleContext<Function_call_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(WeirdoGrammarParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(WeirdoGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(WeirdoGrammarParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(WeirdoGrammarParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(WeirdoGrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(WeirdoGrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(WeirdoGrammarParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(WeirdoGrammarParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(WeirdoGrammarParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(WeirdoGrammarParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(WeirdoGrammarParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(WeirdoGrammarParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(WeirdoGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(WeirdoGrammarParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(WeirdoGrammarParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEQ() { return GetToken(WeirdoGrammarParser.DEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(WeirdoGrammarParser.NEQ, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				{
				State = 35;
				Match(NOT);
				State = 36;
				expression(8);
				}
				break;
			case CALL:
				{
				State = 37;
				function_call_expression();
				}
				break;
			case STRING_LITERAL:
				{
				State = 38;
				string_literal();
				}
				break;
			case OBJECT:
				{
				State = 39;
				Match(OBJECT);
				}
				break;
			case INT:
				{
				State = 40;
				Match(INT);
				}
				break;
			case TRUE:
				{
				State = 41;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 42;
				Match(FALSE);
				}
				break;
			case ID:
				{
				State = 43;
				Match(ID);
				State = 48;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 44;
						Match(DOT);
						State = 45;
						Match(ID);
						}
						} 
					}
					State = 50;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 61;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 59;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 53;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 54;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 491520L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 55;
						expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 56;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 57;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 206L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 58;
						expression(10);
						}
						break;
					}
					} 
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WeirdoGrammarParser.ID, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(WeirdoGrammarParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WeirdoGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WeirdoGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(WeirdoGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(WeirdoGrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_call_expression(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_expressionContext function_call_expression() {
		Function_call_expressionContext _localctx = new Function_call_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function_call_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(CALL);
			State = 67;
			Match(LPAREN);
			State = 68;
			function_name();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 69;
				Match(COMMA);
				State = 70;
				expression(0);
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(WeirdoGrammarParser.STRING_LITERAL, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 8, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(WeirdoGrammarParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WeirdoGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(WeirdoGrammarParser.SEMI, 0); }
		public Global_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterGlobal_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitGlobal_directive(this);
		}
	}

	[RuleVersion(0)]
	public Global_directiveContext global_directive() {
		Global_directiveContext _localctx = new Global_directiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_global_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(GLOBAL);
			State = 81;
			Match(ID);
			State = 82;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entrypoint_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRYPOINT() { return GetToken(WeirdoGrammarParser.ENTRYPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WeirdoGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(WeirdoGrammarParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WeirdoGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WeirdoGrammarParser.RPAREN, 0); }
		public Entrypoint_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrypoint_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterEntrypoint_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitEntrypoint_directive(this);
		}
	}

	[RuleVersion(0)]
	public Entrypoint_directiveContext entrypoint_directive() {
		Entrypoint_directiveContext _localctx = new Entrypoint_directiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_entrypoint_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(ENTRYPOINT);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 85;
				Match(LPAREN);
				}
			}

			State = 88;
			Match(ID);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RPAREN) {
				{
				State = 89;
				Match(RPAREN);
				}
			}

			State = 92;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(WeirdoGrammarParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(WeirdoGrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(WeirdoGrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(WeirdoGrammarParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_expressionContext function_call_expression() {
			return GetRuleContext<Function_call_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(WeirdoGrammarParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(WeirdoGrammarParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(WeirdoGrammarParser.RETURN, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				Match(LOCAL);
				State = 95;
				Match(ID);
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQ) {
					{
					State = 96;
					Match(EQ);
					State = 97;
					expression(0);
					}
				}

				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				if_statement();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101;
				print_statement();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				function_call_expression();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 103;
				Match(ID);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 104;
					Match(DOT);
					State = 105;
					Match(ID);
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 111;
				Match(EQ);
				State = 112;
				expression(0);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 113;
				Match(RETURN);
				State = 114;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(WeirdoGrammarParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WeirdoGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WeirdoGrammarParser.RPAREN, 0); }
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_print_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(PRINT);
			State = 118;
			Match(LPAREN);
			State = 119;
			expression(0);
			State = 120;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(WeirdoGrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(WeirdoGrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(WeirdoGrammarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WeirdoGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WeirdoGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(WeirdoGrammarParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(WeirdoGrammarParser.SEMI, i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(IF);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 123;
				Match(LPAREN);
				}
			}

			State = 126;
			expression(0);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RPAREN) {
				{
				State = 127;
				Match(RPAREN);
				}
			}

			State = 130;
			Match(LCURLY);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47267708928L) != 0)) {
				{
				{
				State = 131;
				statement();
				State = 132;
				Match(SEMI);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 139;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(WeirdoGrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(WeirdoGrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(WeirdoGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(WeirdoGrammarParser.COMMA, i);
		}
		public Arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterArg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitArg_list(this);
		}
	}

	[RuleVersion(0)]
	public Arg_listContext arg_list() {
		Arg_listContext _localctx = new Arg_listContext(Context, State);
		EnterRule(_localctx, 20, RULE_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 141;
				Match(ID);
				}
			}

			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 144;
				Match(COMMA);
				State = 145;
				Match(ID);
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(WeirdoGrammarParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WeirdoGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_listContext arg_list() {
			return GetRuleContext<Arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WeirdoGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(WeirdoGrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(WeirdoGrammarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(WeirdoGrammarParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(WeirdoGrammarParser.SEMI, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeirdoGrammarListener typedListener = listener as IWeirdoGrammarListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 22, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(FUNCTION);
			State = 152;
			function_name();
			State = 153;
			Match(LPAREN);
			State = 154;
			arg_list();
			State = 155;
			Match(RPAREN);
			State = 156;
			Match(LCURLY);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47267708928L) != 0)) {
				{
				{
				State = 157;
				statement();
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 158;
					Match(SEMI);
					}
				}

				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 166;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,39,169,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,5,0,28,8,0,10,0,12,
		0,31,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,47,
		8,1,10,1,12,1,50,9,1,3,1,52,8,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,60,8,1,10,
		1,12,1,63,9,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,5,3,72,8,3,10,3,12,3,75,9,3,
		1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,3,6,87,8,6,1,6,1,6,3,6,91,8,6,
		1,6,1,6,1,7,1,7,1,7,1,7,3,7,99,8,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,107,8,7,
		10,7,12,7,110,9,7,1,7,1,7,1,7,1,7,3,7,116,8,7,1,8,1,8,1,8,1,8,1,8,1,9,
		1,9,3,9,125,8,9,1,9,1,9,3,9,129,8,9,1,9,1,9,1,9,1,9,5,9,135,8,9,10,9,12,
		9,138,9,9,1,9,1,9,1,10,3,10,143,8,10,1,10,1,10,5,10,147,8,10,10,10,12,
		10,150,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,160,8,11,5,11,
		162,8,11,10,11,12,11,165,9,11,1,11,1,11,1,11,0,1,2,12,0,2,4,6,8,10,12,
		14,16,18,20,22,0,2,1,0,15,18,2,0,1,3,6,7,186,0,29,1,0,0,0,2,51,1,0,0,0,
		4,64,1,0,0,0,6,66,1,0,0,0,8,78,1,0,0,0,10,80,1,0,0,0,12,84,1,0,0,0,14,
		115,1,0,0,0,16,117,1,0,0,0,18,122,1,0,0,0,20,142,1,0,0,0,22,151,1,0,0,
		0,24,28,3,22,11,0,25,28,3,12,6,0,26,28,3,10,5,0,27,24,1,0,0,0,27,25,1,
		0,0,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,32,1,
		0,0,0,31,29,1,0,0,0,32,33,5,0,0,1,33,1,1,0,0,0,34,35,6,1,-1,0,35,36,5,
		4,0,0,36,52,3,2,1,8,37,52,3,6,3,0,38,52,3,8,4,0,39,52,5,23,0,0,40,52,5,
		34,0,0,41,52,5,26,0,0,42,52,5,27,0,0,43,48,5,35,0,0,44,45,5,8,0,0,45,47,
		5,35,0,0,46,44,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,52,
		1,0,0,0,50,48,1,0,0,0,51,34,1,0,0,0,51,37,1,0,0,0,51,38,1,0,0,0,51,39,
		1,0,0,0,51,40,1,0,0,0,51,41,1,0,0,0,51,42,1,0,0,0,51,43,1,0,0,0,52,61,
		1,0,0,0,53,54,10,10,0,0,54,55,7,0,0,0,55,60,3,2,1,11,56,57,10,9,0,0,57,
		58,7,1,0,0,58,60,3,2,1,10,59,53,1,0,0,0,59,56,1,0,0,0,60,63,1,0,0,0,61,
		59,1,0,0,0,61,62,1,0,0,0,62,3,1,0,0,0,63,61,1,0,0,0,64,65,5,35,0,0,65,
		5,1,0,0,0,66,67,5,32,0,0,67,68,5,11,0,0,68,73,3,4,2,0,69,70,5,9,0,0,70,
		72,3,2,1,0,71,69,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,
		76,1,0,0,0,75,73,1,0,0,0,76,77,5,12,0,0,77,7,1,0,0,0,78,79,5,39,0,0,79,
		9,1,0,0,0,80,81,5,25,0,0,81,82,5,35,0,0,82,83,5,10,0,0,83,11,1,0,0,0,84,
		86,5,20,0,0,85,87,5,11,0,0,86,85,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,88,
		90,5,35,0,0,89,91,5,12,0,0,90,89,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,
		93,5,10,0,0,93,13,1,0,0,0,94,95,5,21,0,0,95,98,5,35,0,0,96,97,5,5,0,0,
		97,99,3,2,1,0,98,96,1,0,0,0,98,99,1,0,0,0,99,116,1,0,0,0,100,116,3,18,
		9,0,101,116,3,16,8,0,102,116,3,6,3,0,103,108,5,35,0,0,104,105,5,8,0,0,
		105,107,5,35,0,0,106,104,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,
		1,0,0,0,109,111,1,0,0,0,110,108,1,0,0,0,111,112,5,5,0,0,112,116,3,2,1,
		0,113,114,5,22,0,0,114,116,3,2,1,0,115,94,1,0,0,0,115,100,1,0,0,0,115,
		101,1,0,0,0,115,102,1,0,0,0,115,103,1,0,0,0,115,113,1,0,0,0,116,15,1,0,
		0,0,117,118,5,24,0,0,118,119,5,11,0,0,119,120,3,2,1,0,120,121,5,12,0,0,
		121,17,1,0,0,0,122,124,5,33,0,0,123,125,5,11,0,0,124,123,1,0,0,0,124,125,
		1,0,0,0,125,126,1,0,0,0,126,128,3,2,1,0,127,129,5,12,0,0,128,127,1,0,0,
		0,128,129,1,0,0,0,129,130,1,0,0,0,130,136,5,13,0,0,131,132,3,14,7,0,132,
		133,5,10,0,0,133,135,1,0,0,0,134,131,1,0,0,0,135,138,1,0,0,0,136,134,1,
		0,0,0,136,137,1,0,0,0,137,139,1,0,0,0,138,136,1,0,0,0,139,140,5,14,0,0,
		140,19,1,0,0,0,141,143,5,35,0,0,142,141,1,0,0,0,142,143,1,0,0,0,143,148,
		1,0,0,0,144,145,5,9,0,0,145,147,5,35,0,0,146,144,1,0,0,0,147,150,1,0,0,
		0,148,146,1,0,0,0,148,149,1,0,0,0,149,21,1,0,0,0,150,148,1,0,0,0,151,152,
		5,19,0,0,152,153,3,4,2,0,153,154,5,11,0,0,154,155,3,20,10,0,155,156,5,
		12,0,0,156,163,5,13,0,0,157,159,3,14,7,0,158,160,5,10,0,0,159,158,1,0,
		0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,157,1,0,0,0,162,165,1,0,0,0,163,
		161,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,5,
		14,0,0,167,23,1,0,0,0,19,27,29,48,51,59,61,73,86,90,98,108,115,124,128,
		136,142,148,159,163
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
